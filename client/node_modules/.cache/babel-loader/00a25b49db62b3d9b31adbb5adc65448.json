{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzeromski/Desktop/conntected/connected/client/src/context/stations/StationState.jsx\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport StationContext from \"./stationContext\";\nimport stationReducer from \"./stationReducer\";\nimport { GET_ALL_STATIONS, GET_STATION, STATION_ERROR, SET_POSITION, SET_MAP_ZOOM, SET_CURRENT_STATION, GET_USER_STATIONS, SET_MARKER_POSITION, ADD_STATION, SET_EDIT_STATION, EDIT_STATION, DELETE_STATION, GET_AVAIABLE_STATIONS, GET_LATLANG } from \"../types\";\n\nconst StationState = props => {\n  const initialState = {\n    stations: null,\n    stationMapModal: {\n      latitude: 0,\n      longitude: 0\n    },\n    avaiableStations: null,\n    error: null,\n    position: [50.270873, 16.25341],\n    zoom: 5,\n    pickedStation: null,\n    userstations: [],\n    markerPosition: {\n      lat: 50.270873,\n      lng: 16.25341\n    },\n    editStation: null,\n    loading: true\n  };\n  const [state, dispatch] = useReducer(stationReducer, initialState); //Get stations\n\n  const getStations = async () => {\n    try {\n      const res = await axios.get(\"/api/stations\");\n      dispatch({\n        type: GET_ALL_STATIONS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: STATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; //Get station\n\n\n  const getStation = async id => {\n    try {\n      const res = await axios.get(`/api/stations/${id}`);\n      dispatch({\n        type: GET_STATION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: STATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; //Get available stations in picked time range\n\n\n  const getAvailableStations = async (from, to) => {\n    if (from === null) from = new Date().setMinutes(0);\n    if (to === null) to = new Date().setMinutes(0);\n\n    try {\n      const res = await axios.get(`/api/stations/availablestations/${from}/${to}`);\n      dispatch({\n        type: GET_AVAIABLE_STATIONS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: STATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; //Get choosen adress latlang\n\n\n  const getLatLang = async adress => {\n    try {\n      const res = await axios.get(`/api/stations/getlatlang/${adress}`);\n      dispatch({\n        type: GET_LATLANG,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: STATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; //Get choosen station\n\n\n  const setEditStation = stat => {\n    dispatch({\n      type: SET_EDIT_STATION,\n      payload: stat\n    });\n  }; //Set map position\n\n\n  const setPosition = position => {\n    dispatch({\n      type: SET_POSITION,\n      payload: position\n    });\n  }; //Setting zoom to manage map\n\n\n  const setZoom = zoom => {\n    dispatch({\n      type: SET_MAP_ZOOM,\n      payload: zoom\n    });\n  }; //Setting picked station to state\n\n\n  const setStation = station => {\n    dispatch({\n      type: SET_CURRENT_STATION,\n      payload: station\n    });\n  }; //Get user stations\n\n\n  const getUserStations = async () => {\n    try {\n      const res = await axios.get(\"/api/stations/userstations\");\n      dispatch({\n        type: GET_USER_STATIONS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: STATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; //Set marker position\n\n\n  const setMarkerPosition = markerPosition => {\n    dispatch({\n      type: SET_MARKER_POSITION,\n      payload: markerPosition\n    });\n  }; //Add station\n\n\n  const addStation = async station => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(\"/api/stations\", station, config);\n      dispatch({\n        type: ADD_STATION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: STATION_ERROR,\n        payload: err.msg\n      });\n    }\n  }; //Update station\n\n\n  const updateStation = async station => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/stations/${station.id}`, station, config);\n      dispatch({\n        type: EDIT_STATION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: STATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  }; //Delete station\n\n\n  const deleteStation = async id => {\n    try {\n      await axios.delete(`/api/stations/${id}`);\n      dispatch({\n        type: DELETE_STATION,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: STATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StationContext.Provider, {\n    value: {\n      stations: state.stations,\n      stationMapModal: state.stationMapModal,\n      loading: state.loading,\n      position: state.position,\n      zoom: state.zoom,\n      error: state.error,\n      station: state.station,\n      userstations: state.userstations,\n      markerPosition: state.markerPosition,\n      editStation: state.editStation,\n      avaiableStations: state.avaiableStations,\n      getAvailableStations,\n      getStations: getStations,\n      getStation: getStation,\n      setEditStation: setEditStation,\n      updateStation: updateStation,\n      deleteStation: deleteStation,\n      addStation: addStation,\n      setMarkerPosition: setMarkerPosition,\n      getUserStations: getUserStations,\n      setStation: setStation,\n      setPosition: setPosition,\n      setZoom: setZoom,\n      getLatLang\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default StationState;","map":{"version":3,"sources":["/Users/lukaszzeromski/Desktop/conntected/connected/client/src/context/stations/StationState.jsx"],"names":["React","useReducer","axios","StationContext","stationReducer","GET_ALL_STATIONS","GET_STATION","STATION_ERROR","SET_POSITION","SET_MAP_ZOOM","SET_CURRENT_STATION","GET_USER_STATIONS","SET_MARKER_POSITION","ADD_STATION","SET_EDIT_STATION","EDIT_STATION","DELETE_STATION","GET_AVAIABLE_STATIONS","GET_LATLANG","StationState","props","initialState","stations","stationMapModal","latitude","longitude","avaiableStations","error","position","zoom","pickedStation","userstations","markerPosition","lat","lng","editStation","loading","state","dispatch","getStations","res","get","type","payload","data","err","msg","getStation","id","getAvailableStations","from","to","Date","setMinutes","getLatLang","adress","setEditStation","stat","setPosition","setZoom","setStation","station","getUserStations","setMarkerPosition","addStation","config","headers","post","updateStation","put","deleteStation","delete","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport StationContext from \"./stationContext\";\r\nimport stationReducer from \"./stationReducer\";\r\nimport {\r\n  GET_ALL_STATIONS,\r\n  GET_STATION,\r\n  STATION_ERROR,\r\n  SET_POSITION,\r\n  SET_MAP_ZOOM,\r\n  SET_CURRENT_STATION,\r\n  GET_USER_STATIONS,\r\n  SET_MARKER_POSITION,\r\n  ADD_STATION,\r\n  SET_EDIT_STATION,\r\n  EDIT_STATION,\r\n  DELETE_STATION,\r\n  GET_AVAIABLE_STATIONS,\r\n  GET_LATLANG,\r\n} from \"../types\";\r\n\r\nconst StationState = (props) => {\r\n  const initialState = {\r\n    stations: null,\r\n    stationMapModal: { latitude: 0, longitude: 0 },\r\n    avaiableStations: null,\r\n    error: null,\r\n    position: [50.270873, 16.25341],\r\n    zoom: 5,\r\n    pickedStation: null,\r\n    userstations: [],\r\n    markerPosition: { lat: 50.270873, lng: 16.25341 },\r\n    editStation: null,\r\n    loading: true,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(stationReducer, initialState);\r\n\r\n  //Get stations\r\n  const getStations = async () => {\r\n    try {\r\n      const res = await axios.get(\"/api/stations\");\r\n      dispatch({ type: GET_ALL_STATIONS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: STATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  //Get station\r\n  const getStation = async (id) => {\r\n    try {\r\n      const res = await axios.get(`/api/stations/${id}`);\r\n      dispatch({ type: GET_STATION, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: STATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  //Get available stations in picked time range\r\n  const getAvailableStations = async (from, to) => {\r\n    if (from === null) from = new Date().setMinutes(0);\r\n    if (to === null) to = new Date().setMinutes(0);\r\n    try {\r\n      const res = await axios.get(\r\n        `/api/stations/availablestations/${from}/${to}`\r\n      );\r\n      dispatch({ type: GET_AVAIABLE_STATIONS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: STATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  //Get choosen adress latlang\r\n  const getLatLang = async (adress) => {\r\n    try {\r\n      const res = await axios.get(`/api/stations/getlatlang/${adress}`);\r\n\r\n      dispatch({ type: GET_LATLANG, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: STATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  //Get choosen station\r\n  const setEditStation = (stat) => {\r\n    dispatch({\r\n      type: SET_EDIT_STATION,\r\n      payload: stat,\r\n    });\r\n  };\r\n\r\n  //Set map position\r\n  const setPosition = (position) => {\r\n    dispatch({\r\n      type: SET_POSITION,\r\n      payload: position,\r\n    });\r\n  };\r\n\r\n  //Setting zoom to manage map\r\n  const setZoom = (zoom) => {\r\n    dispatch({\r\n      type: SET_MAP_ZOOM,\r\n      payload: zoom,\r\n    });\r\n  };\r\n\r\n  //Setting picked station to state\r\n  const setStation = (station) => {\r\n    dispatch({\r\n      type: SET_CURRENT_STATION,\r\n      payload: station,\r\n    });\r\n  };\r\n\r\n  //Get user stations\r\n  const getUserStations = async () => {\r\n    try {\r\n      const res = await axios.get(\"/api/stations/userstations\");\r\n      dispatch({ type: GET_USER_STATIONS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: STATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  //Set marker position\r\n  const setMarkerPosition = (markerPosition) => {\r\n    dispatch({\r\n      type: SET_MARKER_POSITION,\r\n      payload: markerPosition,\r\n    });\r\n  };\r\n\r\n  //Add station\r\n  const addStation = async (station) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\"/api/stations\", station, config);\r\n      dispatch({ type: ADD_STATION, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: STATION_ERROR, payload: err.msg });\r\n    }\r\n  };\r\n\r\n  //Update station\r\n  const updateStation = async (station) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.put(\r\n        `/api/stations/${station.id}`,\r\n        station,\r\n        config\r\n      );\r\n      dispatch({ type: EDIT_STATION, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: STATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  //Delete station\r\n  const deleteStation = async (id) => {\r\n    try {\r\n      await axios.delete(`/api/stations/${id}`);\r\n      dispatch({ type: DELETE_STATION, payload: id });\r\n    } catch (err) {\r\n      dispatch({ type: STATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StationContext.Provider\r\n      value={{\r\n        stations: state.stations,\r\n        stationMapModal: state.stationMapModal,\r\n        loading: state.loading,\r\n        position: state.position,\r\n        zoom: state.zoom,\r\n        error: state.error,\r\n        station: state.station,\r\n        userstations: state.userstations,\r\n        markerPosition: state.markerPosition,\r\n        editStation: state.editStation,\r\n        avaiableStations: state.avaiableStations,\r\n        getAvailableStations,\r\n        getStations: getStations,\r\n        getStation: getStation,\r\n        setEditStation: setEditStation,\r\n        updateStation: updateStation,\r\n        deleteStation: deleteStation,\r\n        addStation: addStation,\r\n        setMarkerPosition: setMarkerPosition,\r\n        getUserStations: getUserStations,\r\n        setStation: setStation,\r\n        setPosition: setPosition,\r\n        setZoom: setZoom,\r\n        getLatLang,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </StationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default StationState;\r\n"]},"metadata":{},"sourceType":"module"}