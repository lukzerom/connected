{"ast":null,"code":"import { GET_RESERVATIONS_AS_DRIVER, GET_RESERVATIONS_AS_CHARGER, ADD_RESERVATION, DELETE_RESERVATION, CONFIRM_RESERVATION, REJECT_RESERVATION, SET_DATE_FROM, SET_DATE_TO, TOGGLE_MODAL, TOGGLE_RESERVATION_MODAL, RESERVATION_ERROR, SET_RESERVATION_CAR, TOGGLE_MAP_MODAL, SET_ERROR, SET_SUCCESS } from \"../types\";\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_RESERVATIONS_AS_CHARGER:\n      return { ...state,\n        userReservationsAsStation: action.payload,\n        loadingUserStations: false\n      };\n\n    case GET_RESERVATIONS_AS_DRIVER:\n      return { ...state,\n        userReservationsAsDriver: action.payload,\n        loadingUserTrips: false\n      };\n\n    case TOGGLE_MODAL:\n      return { ...state,\n        isModalOpen: action.payload,\n        loading: false\n      };\n\n    case TOGGLE_RESERVATION_MODAL:\n      return { ...state,\n        isReservationModalOpen: action.payload,\n        loading: false\n      };\n\n    case TOGGLE_MAP_MODAL:\n      return { ...state,\n        isMapModalOpen: action.payload,\n        loading: false\n      };\n\n    case SET_DATE_FROM:\n      return { ...state,\n        dateFrom: action.payload,\n        loading: false\n      };\n\n    case SET_DATE_TO:\n      return { ...state,\n        dateTo: action.payload,\n        loading: false\n      };\n\n    case SET_RESERVATION_CAR:\n      return { ...state,\n        carId: action.payload,\n        loading: false\n      };\n\n    case ADD_RESERVATION:\n      return { ...state,\n        reservationsAsDriver: [...state.userReservationsAsDriver, action.payload],\n        success: true,\n        loading: false\n      };\n\n    case CONFIRM_RESERVATION:\n      return { ...state,\n        userReservationsAsStation: state.userReservationsAsStation.map(reservation => reservation._id === action.payload._id ? action.payload : reservation),\n        loading: false\n      };\n\n    case REJECT_RESERVATION:\n      return { ...state,\n        userReservationsAsStation: state.userReservationsAsStation.map(reservation => reservation._id === action.payload._id ? action.payload : reservation),\n        loading: false\n      };\n\n    case RESERVATION_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    case SET_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    case SET_SUCCESS:\n      return { ...state,\n        success: action.payload\n      };\n\n    case DELETE_RESERVATION:\n      return { ...state,\n        userReservationsAsDriver: state.userReservationsAsDriver.filter(reservation => reservation._id !== action.payload),\n        loading: false\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/lukaszzeromski/Desktop/conntected/connected/client/src/context/reservations/reservationReducer.jsx"],"names":["GET_RESERVATIONS_AS_DRIVER","GET_RESERVATIONS_AS_CHARGER","ADD_RESERVATION","DELETE_RESERVATION","CONFIRM_RESERVATION","REJECT_RESERVATION","SET_DATE_FROM","SET_DATE_TO","TOGGLE_MODAL","TOGGLE_RESERVATION_MODAL","RESERVATION_ERROR","SET_RESERVATION_CAR","TOGGLE_MAP_MODAL","SET_ERROR","SET_SUCCESS","state","action","type","userReservationsAsStation","payload","loadingUserStations","userReservationsAsDriver","loadingUserTrips","isModalOpen","loading","isReservationModalOpen","isMapModalOpen","dateFrom","dateTo","carId","reservationsAsDriver","success","map","reservation","_id","error","filter"],"mappings":"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","sourcesContent":["import {\r\n  GET_RESERVATIONS_AS_DRIVER,\r\n  GET_RESERVATIONS_AS_CHARGER,\r\n  ADD_RESERVATION,\r\n  DELETE_RESERVATION,\r\n  CONFIRM_RESERVATION,\r\n  REJECT_RESERVATION,\r\n  SET_DATE_FROM,\r\n  SET_DATE_TO,\r\n  TOGGLE_MODAL,\r\n  TOGGLE_RESERVATION_MODAL,\r\n  RESERVATION_ERROR,\r\n  SET_RESERVATION_CAR,\r\n  TOGGLE_MAP_MODAL,\r\n  SET_ERROR,\r\n  SET_SUCCESS,\r\n} from \"../types\";\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case GET_RESERVATIONS_AS_CHARGER:\r\n      return {\r\n        ...state,\r\n        userReservationsAsStation: action.payload,\r\n        loadingUserStations: false,\r\n      };\r\n    case GET_RESERVATIONS_AS_DRIVER:\r\n      return {\r\n        ...state,\r\n        userReservationsAsDriver: action.payload,\r\n        loadingUserTrips: false,\r\n      };\r\n    case TOGGLE_MODAL:\r\n      return { ...state, isModalOpen: action.payload, loading: false };\r\n\r\n    case TOGGLE_RESERVATION_MODAL:\r\n      return {\r\n        ...state,\r\n        isReservationModalOpen: action.payload,\r\n        loading: false,\r\n      };\r\n\r\n    case TOGGLE_MAP_MODAL:\r\n      return {\r\n        ...state,\r\n        isMapModalOpen: action.payload,\r\n        loading: false,\r\n      };\r\n\r\n    case SET_DATE_FROM:\r\n      return { ...state, dateFrom: action.payload, loading: false };\r\n    case SET_DATE_TO:\r\n      return { ...state, dateTo: action.payload, loading: false };\r\n    case SET_RESERVATION_CAR:\r\n      return { ...state, carId: action.payload, loading: false };\r\n\r\n    case ADD_RESERVATION:\r\n      return {\r\n        ...state,\r\n        reservationsAsDriver: [\r\n          ...state.userReservationsAsDriver,\r\n          action.payload,\r\n        ],\r\n        success: true,\r\n        loading: false,\r\n      };\r\n\r\n    case CONFIRM_RESERVATION:\r\n      return {\r\n        ...state,\r\n        userReservationsAsStation: state.userReservationsAsStation.map(\r\n          (reservation) =>\r\n            reservation._id === action.payload._id\r\n              ? action.payload\r\n              : reservation\r\n        ),\r\n        loading: false,\r\n      };\r\n\r\n    case REJECT_RESERVATION:\r\n      return {\r\n        ...state,\r\n        userReservationsAsStation: state.userReservationsAsStation.map(\r\n          (reservation) =>\r\n            reservation._id === action.payload._id\r\n              ? action.payload\r\n              : reservation\r\n        ),\r\n        loading: false,\r\n      };\r\n\r\n    case RESERVATION_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n\r\n    case SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n      };\r\n\r\n    case SET_SUCCESS:\r\n      return {\r\n        ...state,\r\n        success: action.payload,\r\n      };\r\n\r\n    case DELETE_RESERVATION:\r\n      return {\r\n        ...state,\r\n        userReservationsAsDriver: state.userReservationsAsDriver.filter(\r\n          (reservation) => reservation._id !== action.payload\r\n        ),\r\n        loading: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}