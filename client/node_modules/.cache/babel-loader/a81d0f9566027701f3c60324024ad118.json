{"ast":null,"code":"var _jsxFileName = \"/Users/lukaszzeromski/Desktop/conntected/connected/client/src/context/reservations/ReservationState.jsx\";\nimport React, { useReducer } from \"react\";\nimport axios from \"axios\";\nimport ReservationContext from \"./reservationContext\";\nimport reservationnReducer from \"./reservationReducer\";\nimport { GET_RESERVATIONS_AS_DRIVER, GET_RESERVATIONS_AS_CHARGER, ADD_RESERVATION, DELETE_RESERVATION, CONFIRM_RESERVATION, REJECT_RESERVATION, SET_DATE_FROM, SET_DATE_TO, TOGGLE_MODAL, TOGGLE_RESERVATION_MODAL, RESERVATION_ERROR, SET_RESERVATION_CAR, TOGGLE_MAP_MODAL, SET_ERROR, SET_SUCCESS } from \"../types\";\n\nconst ReservationState = props => {\n  const initialState = {\n    userReservationsAsDriver: [],\n    userReservationsAsStation: [],\n    isModalOpen: true,\n    isMapModalOpen: false,\n    carId: \"\",\n    isReservationModalOpen: false,\n    dateFrom: new Date().setMinutes(0),\n    dateTo: new Date().setMinutes(0),\n    error: null,\n    success: null,\n    loadingUserStations: true,\n    loadingUserTrips: true\n  };\n  const [state, dispatch] = useReducer(reservationnReducer, initialState);\n  const {\n    userReservationsAsDriver,\n    userReservationsAsStation,\n    isModalOpen,\n    isReservationModalOpen,\n    carId,\n    isMapModalOpen,\n    error,\n    success,\n    loadingUserStations,\n    loadingUserTrips\n  } = state;\n\n  const getUserReservationsAsDriver = async () => {\n    try {\n      const res = await axios.get(\"/api/reservations/asdriver\");\n      dispatch({\n        type: GET_RESERVATIONS_AS_DRIVER,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: RESERVATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  };\n\n  const getUserReservationsAsStation = async () => {\n    try {\n      const res = await axios.get(\"/api/reservations/ascharger\");\n      dispatch({\n        type: GET_RESERVATIONS_AS_CHARGER,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: RESERVATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  };\n\n  const addReservation = async reservation => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.post(`/api/reservations/${reservation.id}`, reservation, config);\n      dispatch({\n        type: ADD_RESERVATION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: RESERVATION_ERROR,\n        payload: err.response.data.msg\n      });\n    }\n  };\n\n  const deleteReservation = async id => {\n    try {\n      await axios.delete(`/api/reservations/${id}`);\n      dispatch({\n        type: DELETE_RESERVATION,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: RESERVATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  };\n\n  const confirmReservation = async reservation => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/reservations/${reservation._id}`, reservation, config);\n      dispatch({\n        type: CONFIRM_RESERVATION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: RESERVATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  };\n\n  const rejectReservation = async reservation => {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/reservations/${reservation._id}`, reservation, config);\n      dispatch({\n        type: REJECT_RESERVATION,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: RESERVATION_ERROR,\n        payload: err.res.msg\n      });\n    }\n  };\n\n  const setDateFrom = dateFrom => {\n    dispatch({\n      type: SET_DATE_FROM,\n      payload: dateFrom\n    });\n  };\n\n  const setError = error => {\n    dispatch({\n      type: SET_ERROR,\n      payload: error\n    });\n  };\n\n  const setDateTo = dateTo => {\n    dispatch({\n      type: SET_DATE_TO,\n      payload: dateTo\n    });\n  };\n\n  const toggleModal = isModalOpen => {\n    dispatch({\n      type: TOGGLE_MODAL,\n      payload: isModalOpen\n    });\n  };\n\n  const toggleMapModal = isMapModalOpen => {\n    dispatch({\n      type: TOGGLE_MAP_MODAL,\n      payload: isMapModalOpen\n    });\n  };\n\n  const toggleReservationModal = isReservationModalOpen => {\n    dispatch({\n      type: TOGGLE_RESERVATION_MODAL,\n      payload: isReservationModalOpen\n    });\n  };\n\n  const setReservationCar = carId => {\n    dispatch({\n      type: SET_RESERVATION_CAR,\n      payload: carId\n    });\n  };\n\n  const setSuccess = success => {\n    dispatch({\n      type: SET_SUCCESS,\n      payload: success\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ReservationContext.Provider, {\n    value: {\n      dateFrom: state.dateFrom,\n      dateTo: state.dateTo,\n      isModalOpen,\n      isReservationModalOpen,\n      userReservationsAsDriver,\n      userReservationsAsStation,\n      carId,\n      isMapModalOpen,\n      error,\n      success,\n      loadingUserStations,\n      loadingUserTrips,\n      getUserReservationsAsDriver,\n      getUserReservationsAsStation,\n      addReservation,\n      deleteReservation,\n      toggleModal,\n      toggleReservationModal,\n      confirmReservation,\n      rejectReservation,\n      setDateFrom,\n      setDateTo,\n      setReservationCar,\n      toggleMapModal,\n      setError,\n      setSuccess\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 5\n    }\n  }, props.children);\n};\n\nexport default ReservationState;","map":{"version":3,"sources":["/Users/lukaszzeromski/Desktop/conntected/connected/client/src/context/reservations/ReservationState.jsx"],"names":["React","useReducer","axios","ReservationContext","reservationnReducer","GET_RESERVATIONS_AS_DRIVER","GET_RESERVATIONS_AS_CHARGER","ADD_RESERVATION","DELETE_RESERVATION","CONFIRM_RESERVATION","REJECT_RESERVATION","SET_DATE_FROM","SET_DATE_TO","TOGGLE_MODAL","TOGGLE_RESERVATION_MODAL","RESERVATION_ERROR","SET_RESERVATION_CAR","TOGGLE_MAP_MODAL","SET_ERROR","SET_SUCCESS","ReservationState","props","initialState","userReservationsAsDriver","userReservationsAsStation","isModalOpen","isMapModalOpen","carId","isReservationModalOpen","dateFrom","Date","setMinutes","dateTo","error","success","loadingUserStations","loadingUserTrips","state","dispatch","getUserReservationsAsDriver","res","get","type","payload","data","err","msg","getUserReservationsAsStation","addReservation","reservation","config","headers","post","id","response","deleteReservation","delete","confirmReservation","put","_id","rejectReservation","setDateFrom","setError","setDateTo","toggleModal","toggleMapModal","toggleReservationModal","setReservationCar","setSuccess","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from \"react\";\r\nimport axios from \"axios\";\r\nimport ReservationContext from \"./reservationContext\";\r\nimport reservationnReducer from \"./reservationReducer\";\r\nimport {\r\n  GET_RESERVATIONS_AS_DRIVER,\r\n  GET_RESERVATIONS_AS_CHARGER,\r\n  ADD_RESERVATION,\r\n  DELETE_RESERVATION,\r\n  CONFIRM_RESERVATION,\r\n  REJECT_RESERVATION,\r\n  SET_DATE_FROM,\r\n  SET_DATE_TO,\r\n  TOGGLE_MODAL,\r\n  TOGGLE_RESERVATION_MODAL,\r\n  RESERVATION_ERROR,\r\n  SET_RESERVATION_CAR,\r\n  TOGGLE_MAP_MODAL,\r\n  SET_ERROR,\r\n  SET_SUCCESS,\r\n} from \"../types\";\r\n\r\nconst ReservationState = (props) => {\r\n  const initialState = {\r\n    userReservationsAsDriver: [],\r\n    userReservationsAsStation: [],\r\n    isModalOpen: true,\r\n    isMapModalOpen: false,\r\n    carId: \"\",\r\n    isReservationModalOpen: false,\r\n    dateFrom: new Date().setMinutes(0),\r\n    dateTo: new Date().setMinutes(0),\r\n    error: null,\r\n    success: null,\r\n    loadingUserStations: true,\r\n    loadingUserTrips: true,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(reservationnReducer, initialState);\r\n\r\n  const {\r\n    userReservationsAsDriver,\r\n    userReservationsAsStation,\r\n    isModalOpen,\r\n    isReservationModalOpen,\r\n    carId,\r\n    isMapModalOpen,\r\n    error,\r\n    success,\r\n    loadingUserStations,\r\n    loadingUserTrips,\r\n  } = state;\r\n\r\n  const getUserReservationsAsDriver = async () => {\r\n    try {\r\n      const res = await axios.get(\"/api/reservations/asdriver\");\r\n      dispatch({ type: GET_RESERVATIONS_AS_DRIVER, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: RESERVATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  const getUserReservationsAsStation = async () => {\r\n    try {\r\n      const res = await axios.get(\"/api/reservations/ascharger\");\r\n      dispatch({ type: GET_RESERVATIONS_AS_CHARGER, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: RESERVATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  const addReservation = async (reservation) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        `/api/reservations/${reservation.id}`,\r\n        reservation,\r\n        config\r\n      );\r\n      dispatch({ type: ADD_RESERVATION, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: RESERVATION_ERROR, payload: err.response.data.msg });\r\n    }\r\n  };\r\n\r\n  const deleteReservation = async (id) => {\r\n    try {\r\n      await axios.delete(`/api/reservations/${id}`);\r\n      dispatch({ type: DELETE_RESERVATION, payload: id });\r\n    } catch (err) {\r\n      dispatch({ type: RESERVATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  const confirmReservation = async (reservation) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.put(\r\n        `/api/reservations/${reservation._id}`,\r\n        reservation,\r\n        config\r\n      );\r\n      dispatch({ type: CONFIRM_RESERVATION, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: RESERVATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  const rejectReservation = async (reservation) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    try {\r\n      const res = await axios.put(\r\n        `/api/reservations/${reservation._id}`,\r\n        reservation,\r\n        config\r\n      );\r\n      dispatch({ type: REJECT_RESERVATION, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: RESERVATION_ERROR, payload: err.res.msg });\r\n    }\r\n  };\r\n\r\n  const setDateFrom = (dateFrom) => {\r\n    dispatch({\r\n      type: SET_DATE_FROM,\r\n      payload: dateFrom,\r\n    });\r\n  };\r\n\r\n  const setError = (error) => {\r\n    dispatch({\r\n      type: SET_ERROR,\r\n      payload: error,\r\n    });\r\n  };\r\n\r\n  const setDateTo = (dateTo) => {\r\n    dispatch({\r\n      type: SET_DATE_TO,\r\n      payload: dateTo,\r\n    });\r\n  };\r\n\r\n  const toggleModal = (isModalOpen) => {\r\n    dispatch({\r\n      type: TOGGLE_MODAL,\r\n      payload: isModalOpen,\r\n    });\r\n  };\r\n\r\n  const toggleMapModal = (isMapModalOpen) => {\r\n    dispatch({\r\n      type: TOGGLE_MAP_MODAL,\r\n      payload: isMapModalOpen,\r\n    });\r\n  };\r\n\r\n  const toggleReservationModal = (isReservationModalOpen) => {\r\n    dispatch({\r\n      type: TOGGLE_RESERVATION_MODAL,\r\n      payload: isReservationModalOpen,\r\n    });\r\n  };\r\n\r\n  const setReservationCar = (carId) => {\r\n    dispatch({\r\n      type: SET_RESERVATION_CAR,\r\n      payload: carId,\r\n    });\r\n  };\r\n\r\n  const setSuccess = (success) => {\r\n    dispatch({\r\n      type: SET_SUCCESS,\r\n      payload: success,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ReservationContext.Provider\r\n      value={{\r\n        dateFrom: state.dateFrom,\r\n        dateTo: state.dateTo,\r\n        isModalOpen,\r\n        isReservationModalOpen,\r\n        userReservationsAsDriver,\r\n        userReservationsAsStation,\r\n        carId,\r\n        isMapModalOpen,\r\n        error,\r\n        success,\r\n        loadingUserStations,\r\n        loadingUserTrips,\r\n        getUserReservationsAsDriver,\r\n        getUserReservationsAsStation,\r\n        addReservation,\r\n        deleteReservation,\r\n        toggleModal,\r\n        toggleReservationModal,\r\n        confirmReservation,\r\n        rejectReservation,\r\n        setDateFrom,\r\n        setDateTo,\r\n        setReservationCar,\r\n        toggleMapModal,\r\n        setError,\r\n        setSuccess,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ReservationContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ReservationState;\r\n"]},"metadata":{},"sourceType":"module"}